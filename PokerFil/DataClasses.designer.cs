#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18444
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PokerFil
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[Database(Name="PokerFil")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertPreflopProbility(PreflopProbility instance);
    partial void UpdatePreflopProbility(PreflopProbility instance);
    partial void DeletePreflopProbility(PreflopProbility instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::PokerFil.Properties.Settings.Default.PokerFilConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PreflopProbility> PreflopProbility
		{
			get
			{
				return this.GetTable<PreflopProbility>();
			}
		}
	}
	
	[Table(Name="dbo.PreflopProbility")]
	public partial class PreflopProbility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Data.Linq.Binary _Hash;
		
		private double _WinProbility;
		
		private double _SplitProbility;
		
		private int _OtherPlayersCount;
		
		private string _Cards;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnHashChanging(System.Data.Linq.Binary value);
    partial void OnHashChanged();
    partial void OnWinProbilityChanging(double value);
    partial void OnWinProbilityChanged();
    partial void OnSplitProbilityChanging(double value);
    partial void OnSplitProbilityChanged();
    partial void OnOtherPlayersCountChanging(int value);
    partial void OnOtherPlayersCountChanged();
    partial void OnCardsChanging(string value);
    partial void OnCardsChanged();
    #endregion
		
		public PreflopProbility()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Hash", DbType="Binary(8) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[Column(Storage="_WinProbility", DbType="Float NOT NULL")]
		public double WinProbility
		{
			get
			{
				return this._WinProbility;
			}
			set
			{
				if ((this._WinProbility != value))
				{
					this.OnWinProbilityChanging(value);
					this.SendPropertyChanging();
					this._WinProbility = value;
					this.SendPropertyChanged("WinProbility");
					this.OnWinProbilityChanged();
				}
			}
		}
		
		[Column(Storage="_SplitProbility", DbType="Float NOT NULL")]
		public double SplitProbility
		{
			get
			{
				return this._SplitProbility;
			}
			set
			{
				if ((this._SplitProbility != value))
				{
					this.OnSplitProbilityChanging(value);
					this.SendPropertyChanging();
					this._SplitProbility = value;
					this.SendPropertyChanged("SplitProbility");
					this.OnSplitProbilityChanged();
				}
			}
		}
		
		[Column(Storage="_OtherPlayersCount", DbType="Int NOT NULL")]
		public int OtherPlayersCount
		{
			get
			{
				return this._OtherPlayersCount;
			}
			set
			{
				if ((this._OtherPlayersCount != value))
				{
					this.OnOtherPlayersCountChanging(value);
					this.SendPropertyChanging();
					this._OtherPlayersCount = value;
					this.SendPropertyChanged("OtherPlayersCount");
					this.OnOtherPlayersCountChanged();
				}
			}
		}
		
		[Column(Storage="_Cards", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				if ((this._Cards != value))
				{
					this.OnCardsChanging(value);
					this.SendPropertyChanging();
					this._Cards = value;
					this.SendPropertyChanged("Cards");
					this.OnCardsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
